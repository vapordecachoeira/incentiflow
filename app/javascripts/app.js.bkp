// Import the page's CSS. Webpack will know what to do with it.
import '../stylesheets/app.css'
// Import libraries we need.
import { default as Web3 } from 'web3'
import { default as contract } from 'truffle-contract'
import meter_artifacts from '../../build/contracts/Meter.json'

/*
 * When you compile and deploy your Voting contract,
 * truffle stores the abi and deployed address in a json
 * file in the build directory. We will use this information
 * to setup a Voting abstraction. We will use this abstraction
 * later to create an instance of the Voting contract.
 * Compare this against the index.js from our previous tutorial to see the difference
 * https://gist.github.com/maheshmurthy/f6e96d6b3fff4cd4fa7f892de8a1a1b4#file-index-js
 */

var Meter = contract(meter_artifacts)

window.register = function () {
  let device_address = $('#device_address').val();
  let serial = $('#serial').val();
  let created_at_unix_time_gmt = Date.now()/1000;

  try {
    $('#msg').html('Registering the device on the blockchain. Please wait.');

      Meter.deployed().then(function (contractInstance) {
          contractInstance.register(device_address, serial,  created_at_unix_time_gmt, {
            gas: 140000,
            from: web3.eth.accounts[0]
          }).then(function () {
              $('#msg').html('Registered!');
            // let div_id = candidates[candidateName]
            // return contractInstance.totalVotesFor.call(candidateName).then(function (v) {
            //       $('#' + div_id).html(v.toString())
            //       $('#msg').html('')
            //     })
            })
    })
  } catch (err) {
    console.log(err)
  }
}

$(document).ready(function () {
  if (typeof web3 !== 'undefined') {
    console.warn('Using web3 detected from external source like Metamask')
        // Use Mist/MetaMask's provider
    window.web3 = new Web3(web3.currentProvider)
  }
  else {
    console.warn("No web3 detected. Falling back to http://localhost:8545. You should remove this fallback when you deploy live, as it's inherently insecure. Consider switching to Metamask for development. More info here: http://truffleframework.com/tutorials/truffle-and-metamask")
        // fallback - use your fallback strategy (local node / hosted node + in-dapp id mgmt / fail)
    window.web3 = new Web3(new Web3.providers.HttpProvider('http://localhost:8545'))
  }

  Meter.setProvider(web3.currentProvider);

  // for (var i = 0; i < candidateNames.length; i++) {
  //   let name = candidateNames[i]
  //   Voting.deployed().then(function (contractInstance) {
  //     contractInstance.totalVotesFor.call(name).then(function (v) {
  //       $('#' + candidates[name]).html(v.toString())
  //     })
  //   })
  // }
})
